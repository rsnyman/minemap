#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#  
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#  
###
#  
#  Minemap generator by Wesley Werner 2014
#  Inspired by the Minetest game
#  
#  The most basic map config can be just this one file, but when
#  you start loading in other images I recommend you put each
#  map in it's own directory, to keep things tidy.
#  
#  ~/maps
#       |
#       hello world
#       | |
#       | hello-world.conf
#       | waterfall.png
#       | well.png
#       | hill.png
#       |
#       online world
#       | |
#       | online-world.conf
#       | river.png
#       | castle.png
#
# Strings are quoted for best results. Everything marked as 
# "not implemented" are only ideas, and may not make future versions.

[ Map ]

# The title of this map, which is also printed.
# (not implemented)
Title = "Hello, World."

# The file name to save the map as. The extension determines the format
# and may be png or jpg. It can also be any other format that PIL
# supports.
Filename = "hello-world.png"

# Appends each generation's file name with "_Vn" where "n" is a counter.
# (not implemented)
Versioned = Yes

# The map scales position coordinates to image pixels.
# A scale of 1 maps each position step to a pixel, where a scale of 10
# maps each step to 10 pixels. This means your image will be
# x10 as wide, but reasonably so to fit words and extra
# images on the map.
Scale = 1

# The background color of the map in web hex format.
Backcolor = "#ffffff"

# Use a tillable image as the background instead of a solid color.
#BackgroundTile = "tileable-image.png"

# Draw a border of size and color around the final map
# (not implemented)
BorderSize = 20
BorderColor = "#000000"

# Apply this much padding to the map, after scaling, to the
# (left, top, right, bottom) edges. This happens before a border is
# added, and provides a way to avoid your landmark titles being cut off.
Padding = 100, 100, 100, 100

# The legend allows you to include a reference card of what the
# icons on your map represent. If the legend section is present,
# then it will print in a widened border of your map.
# (not implemented)
[ Legend ]

    [[ Hill ]]
    image = hill-legend.png
    
    [[ Tower ]]
    image = tower-legend.png

# The list of landmarks on the map. Each entry must have a unique name.
# The position is required, all other attributes are optional.
# The available options are:
#   image = "file name of an image to use instead of drawing the
#           marker dot"
[ Landmarks ]

    [[ Water Falls ]]
    position = -295, 274
    
    [[ Wheat Farm ]]
    position = -355, 261

    [[ The Playground ]]
    position = -300, 224

    [[ House in the Woods ]]
    position = -400, 244
    
    [[ Grandma's brick house ]]
    position = -316, 78
    
    [[ The Haunted Castle ]]
    position = -311, 50
    
    [[ Lookout Hillside ]]
    position = -147, 184
    
    [[ A Tree House ]]
    position = -61, 230
    
    [[ Flower Patch ]]
    position = -121, 112
    
    [[ Magic Fountain ]]
    position = -169, 138

# Decorations allow you to place unnamed icons, paths and filled 
# polygons on the map. Each entry must have a unique name, and should
# describe what the decoration represent. The "stamp" attribute
# sets the image to use for the decoration.
# These attributes determine the behaviour used when drawing:
#
#   lines
#   A list of 2D points that make up one or more lines. The stamp
#   will be used along each line so that it won't overlap the previous
#   stamp. Effectively: a chain of stamps that follow the lines.
#   (not implemented)
#
#   poly
#   A list of points that make up a polygon. The stamp will tile fill
#   inside the polygon.
#   (not implemented)
[ Decorations ]

    [[ walkways ]]
    stamp = "dirt.png"
    #lines = ((x1, y1), (x2, y2)), 
            #((m1, n1), (m2, n2)), 
            #((o1, p1), (o2, p2)), 
    
    [[ ponds ]]
    stamp = "water.png"
    #poly = (x1, y1), (x2, y2),
           #(m1, n1), (m2, n2),
           #(o1, p1), (o2, p2),
